.container
  .row
    .col-md-12
      %h1= h @node.name

  .row
    .col-md-7
      = render partial: 'shared/edit_delete', locals: { record: @node }

      - unless @node.logo.blank?
        = image_tag @node.logo.url

      = markdown @node.body

      - if @node.notes?
        = markdown @node.notes

      %h2= NodeLink.model_name.human(count: 2)

      %ul
        - @node.node_links.each do |node_link|
          %li
            = link_to node_link.name, url_for(node_link)
            = link_to node_link.url, node_link.url
            - if policy(@node).update?
              = link_to url_for(node_link), method: :delete,
                        data: { confirm: t(:confirm_delete,
                                thing: NodeLink.model_name.human.downcase) } do
                %span.glyphicon.glyphicon-remove
        - if policy(@node).update?
          %li
            = form_tag node_links_path, class: 'form-inline' do
              - if @node_link && @node_link.errors.any?
                .error-explanation
                  = t :errors, count: @node_link.errors.count,
                      thing: NodeLink.model_name.human.downcase
                  %ul
                    - @node_link.errors.full_messages.each do |msg|
                      %li= msg
              .form-group
                %label.sr-only{ for: 'node_link_name' }
                  = NodeLink.human_attribute_name('name')
                = text_field 'node_link', 'name', class: 'form-control',
                             placeholder: NodeLink.human_attribute_name('name')
              .form-group
                %label.sr-only{ for: 'node_link_url' }
                  = NodeLink.human_attribute_name('url')
                = text_field 'node_link', 'url', class: 'form-control',
                             placeholder: NodeLink.human_attribute_name('url')
              = hidden_field 'node_link', 'node_id', value: @node.to_param
              = submit_tag t(:create), id: 'node_link_create',
                           class: 'btn btn-primary'

      %h2= Host.model_name.human(count: 2)

      %ul
        - @node.hosts.each do |host|
          %li
            = link_to host.name, url_for(host)
            - if policy(@node).update?
              = link_to url_for(host), method: :delete,
                        data: { confirm: t(:confirm_delete,
                                thing: Host.model_name.human.downcase) } do
                %span.glyphicon.glyphicon-remove
        - if policy(@node).update?
          %li
            = form_tag hosts_path, class: 'form-inline' do
              - if @host && @host.errors.any?
                .error-explanation
                  = t :errors, count: @host.errors.count,
                      thing: Host.model_name.human.downcase
                  %ul
                    - @host.errors.full_messages.each do |msg|
                      %li= msg
              .form-group
                %label.sr-only{ for: 'host_name' }
                  = Host.human_attribute_name('name')
                = text_field 'host', 'name', class: 'form-control',
                             placeholder: Host.human_attribute_name('name')
              = hidden_field 'host', 'node_id', value: @node.to_param
              = submit_tag t(:create), id: 'host_create',
                           class: 'btn btn-primary'

      %h2= t('.network_diagram')
      %p= image_tag graph_node_path(@node, format: :png)

    .col-md-5
      %p.small
        = link_to t(:zone, zone: @node.zone.name), url_for(@node.zone)
        %br/
        = t :code, code: @node.code
        %br/
        - if @node.user.name
          = link_to @node.user.name, url_for(@node.user)
          %br/
        %span{ class: @node.status.color }
          = t :status, status: @node.status.name

      - if @node.address?
        %p= @node.address
        %p= link_to t(:get_directions), @node.directions_url, target: :_blank

      - if @node.hours?
        %p= t :hours, hours: @node.hours

      - if @node.latitude && @node.longitude
        #map{ 'data-markers': node_path(@node, format: :json) }
        %span.text-muted.pull-right
          = link_to t(:json), node_path(@node, format: :json)
          \|
          = link_to t(:kml), node_path(@node, format: :kml)
          \|
          = link_to t(:xml), node_path(@node, format: :xml)
